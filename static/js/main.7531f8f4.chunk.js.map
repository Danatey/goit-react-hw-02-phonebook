{"version":3,"sources":["Components/Button/Button.jsx","Components/Input/Input.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","Components/ContactsListItem/ContactsListItem.jsx","App.js","index.js"],"names":["Button","btnType","btnName","onClick","classButton","type","className","defaultProps","Input","value","name","pattern","title","id","onChange","classInput","classLabel","htmlFor","required","ContactForm","state","Name","Number","handleChange","event","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","nanoid","reset","number","this","InputEl","map","generateID","ButtonEl","Component","Filter","ContactsList","children","ContactsListItem","onDelete","contacts","App","filter","formSubmitHandler","data","isInContacts","contact","console","log","some","alert","prevState","filterHandler","deleteHandler","contactId","normalizedFilter","toLocaleLowerCase","filteredContactList","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7531f8f4.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ btnType, btnName, onClick , classButton}) => {\r\n    return (<>\r\n            <button type={btnType} onClick={onClick} className={classButton}>{btnName}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    btnType: \"button\",\r\n}\r\n\r\nButton.propTypes = {\r\n  btnType: PropTypes.string.isRequired,\r\n  btnName: PropTypes.string.isRequired,\r\n  price: PropTypes.func,\r\n  classButton: PropTypes.string,\r\n};\r\n\r\nexport default Button","import Proptypes from 'prop-types'\r\n\r\nconst Input = ({ type, value, name, pattern, title, id, onChange, classInput, classLabel }) => {\r\n  return (<>\r\n        <label htmlFor={id} className={classLabel}>{name}</label>\r\n        <input\r\n          className={classInput}\r\n          type={type}\r\n          value={value}\r\n          name={name}\r\n          pattern={pattern}\r\n          title={title}\r\n          id={id}\r\n          onChange={onChange}\r\n          required/>  \r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  value: Proptypes.string.isRequired,\r\n  name: Proptypes.string,\r\n  pattern: Proptypes.string,\r\n  title: Proptypes.string,\r\n  id: Proptypes.string.isRequired,\r\n  onChange: Proptypes.func.isRequired,\r\n  classInput: Proptypes.string,\r\n  classLabel: Proptypes.string,\r\n}\r\n\r\nexport default Input","import React, { Component } from \"react\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Button from '../Button';\r\nimport Input from '../Input';\r\n\r\nimport ButtonEl from './ButtonEl.json';\r\nimport InputEl from './InputEl.json';\r\n\r\nimport './ContactForm.scss'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        Name: '',\r\n        Number: '',\r\n    };\r\n    \r\n    handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({ id: nanoid(), ...this.state });\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '', });\r\n    };\r\n\r\n    render() {\r\n        const { Name, Number } = this.state;\r\n        return (\r\n            <form className=\"form-container\" onSubmit={this.handleSubmit}>\r\n                {InputEl.map(({ type, name, pattern, title}) =>\r\n                {\r\n                    const generateID = nanoid();\r\n                    let value\r\n                    if (name === 'Name') {\r\n                        value=Name\r\n                    }\r\n                    if (name === 'Number') {\r\n                        value= Number\r\n                    }\r\n                    return (<Input\r\n                        type={type}\r\n                        value={value}\r\n                        name={name}\r\n                        pattern={pattern}\r\n                        title={title}\r\n                        key={name}\r\n                        id={generateID}\r\n                        onChange={this.handleChange}\r\n                        classLabel=\"form-label\"\r\n                        classInput=\"form-input\"\r\n                        />)\r\n                })}\r\n                {ButtonEl.map(({ btnType, btnName }) =>\r\n                {\r\n                    return (<Button\r\n                        btnType={btnType}\r\n                        btnName={btnName}\r\n                        key={btnName}\r\n                        classButton=\"form-button\"\r\n                    />)\r\n                })}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactForm","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Input from '../Input';\r\n\r\nimport './Filter.scss'\r\n\r\nconst generateID = nanoid();\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <Input\r\n    value={value}\r\n    onChange={onChange}\r\n    type=\"text\"\r\n    id={generateID}\r\n    name=\"Find contacts by name\"\r\n    classLabel=\"filter-label\"\r\n    classInput=\"filter-input\"\r\n  />\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport './ContactList.scss'\r\n\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"contacts-list\">{ children }</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\n\r\nimport Button from \"../Button\";\r\n\r\nimport './ContactsListItem.scss'\r\n\r\nconst ContactsListItem = ({ onDelete, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, Name, Number }) => {\r\n      return (\r\n        <li key={id} className=\"contact-item\">\r\n          {Name}: {Number}\r\n          <Button\r\n            btnType=\"button\"\r\n            btnName=\"Delete\"\r\n            onClick={() => onDelete(id)}\r\n            classButton=\"contact-button\"\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      Name: PropTypes.string.isRequired,\r\n      Number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactsListItem","import React, { Component } from \"react\";\n\nimport ContactForm from \"./Components/ContactForm\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactsListItem from \"./Components/ContactsListItem\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    // contacts: [],\n    contacts: [\n      { id: \"id-1\", Name: \"Rosie Simpson\", Number: \"459-12-56\" },\n      { id: \"id-2\", Name: \"Hermione Kline\", Number: \"443-89-12\" },\n      { id: \"id-3\", Name: \"Eden Clements\", Number: \"645-17-79\" },\n      { id: \"id-4\", Name: \"Annie Copeland\", Number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  formSubmitHandler = (data) => {\n    const isInContacts = (contact) => {\n      return contact.Name === data.Name;\n    };\n    console.log(this.state.contacts.some(isInContacts));\n    if (this.state.contacts.some(isInContacts)) {\n      alert(`${data.Name} is already in contacts`);\n      return;\n    } else\n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, data],\n      }));\n  };\n\n  filterHandler = (event) => {\n    const { value } = event.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  deleteHandler = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContactList = contacts.filter((contact) =>\n      contact.Name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return (\n      <div className=\"container\">\n        <h2 className=\"title\">Phonebook</h2>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <h2 className=\"secondary-title\">Contacts</h2>\n        {contacts.length > 0 ? (\n          <>\n            <Filter onChange={this.filterHandler} value={filter} />\n            <ContactList>\n              <ContactsListItem\n                contacts={filteredContactList}\n                onDelete={this.deleteHandler}\n              />\n            </ContactList>\n          </>\n        ) : (\n          <span className=\"contact-message\">You have no contacts yet </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}