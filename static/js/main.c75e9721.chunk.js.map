{"version":3,"sources":["Components/Button/Button.jsx","Components/Input/Input.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","Components/ContactsListItem/ContactsListItem.jsx","App.js","index.js"],"names":["Button","btnType","btnName","onClick","type","Input","value","name","pattern","title","id","onChange","htmlFor","required","ContactForm","state","Name","Number","handleChange","event","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","nanoid","reset","number","this","InputEl","map","generateID","ButtonEl","Component","Filter","ContactsList","children","ContactsListItem","onDelete","contacts","App","filter","formSubmitHandler","data","isInContacts","contact","console","log","some","alert","prevState","filterHandler","deleteHandler","contactId","normalizedFilter","toLocaleLowerCase","filteredContactList","includes","length","ContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75e9721.chunk.js","sourcesContent":["const Button = ({btnType, btnName, onClick}) => {\r\n    return (<>\r\n            <button type={btnType} onClick={onClick}>{btnName}</button>\r\n        </>\r\n    )\r\n}\r\nexport default Button","const Input = ({type, value, name, pattern, title, id, onChange}) => {\r\n  return (<>\r\n        <label htmlFor={id}>{name}</label>\r\n        <input\r\n          type={type}\r\n          value={value}\r\n          name={name}\r\n          pattern={pattern}\r\n          title={title}\r\n          id={id}\r\n          onChange={onChange}\r\n          required/>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input","import React, { Component } from \"react\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Button from '../Button';\r\nimport Input from '../Input';\r\n\r\nimport ButtonEl from './ButtonEl.json';\r\nimport InputEl from './InputEl.json';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        Name: '',\r\n        Number: '',\r\n    };\r\n    \r\n    handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({ id: nanoid(), ...this.state });\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '', });\r\n    };\r\n\r\n    render() {\r\n        const { Name, Number } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                {InputEl.map(({ type, name, pattern, title }) =>\r\n                {\r\n                    const generateID = nanoid();\r\n                    let value\r\n                    if (name === 'Name') {\r\n                        value=Name\r\n                    }\r\n                    if (name === 'Number') {\r\n                        value= Number\r\n                    }\r\n                    return (<Input\r\n                        type={type}\r\n                        value={value}\r\n                        name={name}\r\n                        pattern={pattern}\r\n                        title={title}\r\n                        key={name}\r\n                        id={generateID}\r\n                        onChange={this.handleChange}\r\n                        />)\r\n                })}\r\n                {ButtonEl.map(({ btnType, btnName }) =>\r\n                {\r\n                    return (<Button\r\n                        btnType={btnType}\r\n                        btnName={btnName}\r\n                        key={btnName}\r\n                    />)\r\n                })}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactForm","const Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul>{ children }</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","// import PropTypes from 'prop-types';\r\n\r\nimport Button from \"../Button\";\r\n\r\nconst ContactsListItem = ({ onDelete, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, Name, Number }) => {\r\n      return (\r\n        <li key={id}>\r\n          {Name}: {Number}\r\n          <Button btnType=\"button\" btnName=\"Delete\" onClick={() => onDelete(id)}/>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nexport default ContactsListItem","import React, { Component } from \"react\";\n\nimport ContactForm from \"./Components/ContactForm\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactsListItem from \"./Components/ContactsListItem\";\n\nclass App extends Component {\n  state = {\n    // contacts: [],\n    contacts: [\n      { id: \"id-1\", Name: \"Rosie Simpson\", Number: \"459-12-56\" },\n      { id: \"id-2\", Name: \"Hermione Kline\", Number: \"443-89-12\" },\n      { id: \"id-3\", Name: \"Eden Clements\", Number: \"645-17-79\" },\n      { id: \"id-4\", Name: \"Annie Copeland\", Number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  formSubmitHandler = (data) => {\n    const isInContacts = (contact) => {\n      return contact.Name === data.Name;\n    };\n    console.log(this.state.contacts.some(isInContacts));\n    if (this.state.contacts.some(isInContacts)) {\n      alert(`${data.Name} is already in contacts`);\n      return;\n    } else\n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, data],\n      }));\n  };\n\n  filterHandler = (event) => {\n    const { value } = event.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  deleteHandler = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContactList = contacts.filter((contact) =>\n      contact.Name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <h2>Contacts</h2>\n        {contacts.length > 0 ? (\n          <>\n            <Filter onChange={this.filterHandler} value={filter} />\n            <ContactList>\n              <ContactsListItem\n                contacts={filteredContactList}\n                onDelete={this.deleteHandler}\n              />\n            </ContactList>\n          </>\n        ) : (\n          <span>You have no contacts yet </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}